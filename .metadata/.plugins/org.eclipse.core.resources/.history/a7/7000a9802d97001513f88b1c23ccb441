package linkedlist;

public class Link{
	public String bookName;
	public int millionsSold;
	public Link next;
	
	public Link(String bookName,int millionsSold){
		this.bookName=bookName;
		this.millionsSold=millionsSold;
	}
	
	public void display(){
		System.out.println("Book with name" + " " + bookName + " has " + millionsSold + ",000,000 copies sold");
	}
	
	public String toString(){
		return bookName;
	}
	
	public static void main(String[] args){
		linkedList theLinkedList=new linkedList();
		theLinkedList.insertFirstLink("A Thousand Splendid Suns",500);
		theLinkedList.insertFirstLink("Harry Porter",700);
		theLinkedList.insertFirstLink("A Kite Runner",800);
		theLinkedList.display();
		theLinkedList.iterativeReverse(theLinkedList);
	}
	

}

class linkedList{
	
	public Link firstLink;
	
	public linkedList(){
		firstLink=null;
	}
	
	public boolean isEmpty(){
		return(firstLink==null);
	}
	
	public void insertFirstLink(String bookName,int millionsSold){
		Link newLink=new Link(bookName,millionsSold);
		newLink.next=firstLink;
		firstLink=newLink;
	}
	
	public Link removeFirstLink(){
		Link theLink=firstLink;
		if(!isEmpty()){
			firstLink=firstLink.next;
		}
		else{
			System.out.println("Empty Linked List");
		}
		return theLink;
	}
	
	public void display(){
		Link theLink=firstLink;
		while(theLink!=null){
			theLink.display();
			System.out.println("Next Link:"+ theLink.next);
			theLink=theLink.next;
		}
	}
	
	public Link find(String bookName){
		Link theLink=firstLink;
		if(!isEmpty()){
			while(theLink.bookName!=bookName){
				if(theLink.next==null){
					return null;
				}
				else{
					theLink=theLink.next;
				}
			}
		}
		else{
			System.out.println("Empty Linked List");
		}
		return theLink;
	}
	
	public Link removeLink(String bookName){
		Link currentLink=firstLink;
		Link previousLink=firstLink;
		
		while(currentLink.bookName!=bookName){
			if(currentLink.next==null){
				return null;
			}
			else{
				previousLink=currentLink;
				currentLink=currentLink.next;
			}
		}
		if(currentLink==firstLink){
			firstLink=firstLink.next;
		}
		else{
			previousLink.next=currentLink.next;
		}
		return currentLink;
	}
	
	public void iterativeReverse(linkedList linkedList) {
		 
        if ((isEmpty()) || (linkedList.firstLink == null)) {
           linkedList.display();
        }
 
        Link prevNode, currNode, nextNode;
        prevNode = null;
        nextNode = null;
        currNode = firstLink;
 
        while (currNode.next != null) {
            nextNode = currNode.next;
            currNode.next = prevNode;
            prevNode = currNode;
            currNode = nextNode;
            System.out.println(currNode);
        }
        System.out.println(currNode.next);
    }
	
}